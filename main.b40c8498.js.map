{"version":3,"sources":["scripts/game.js","scripts/main.js"],"names":["module","exports","field","score","addRandomCell","start","end","Math","round","random","row","Game","getRandomNumber","column","isGameOver","currentCell","isEmptyCell","some","includes","isMove","iR","_","iC","canCellBeCombined","cell","map","c","__","r","transposeField","moveLeft","moveRight","newRow","reduce","acc","length","push","Array","fill","reduceRight","unshift","require","game","cellElements","document","querySelectorAll","querySelector","controlButton","message","getGameField","forEach","cellValue","cellElement","textContent","className","classList","remove","isGameWin","addEventListener","contains","add","resetGame","click","key","moveUp","moveDown","Error"],"mappings":"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","file":"main.b40c8498.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n// export class Game {\n\nmodule.exports = class Game {\n  static getRandomNumber(start, end) {\n    return Math.round(Math.random() * (end - start) + start);\n  }\n\n  constructor() {\n    this.field = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n\n    this\n      .addRandomCell()\n      .addRandomCell();\n  }\n\n  addRandomCell() {\n    const row = Game.getRandomNumber(0, 3);\n    const column = Game.getRandomNumber(0, 3);\n\n    if (this.field[row][column] === 0) {\n      this.field[row][column] = Math.random() < 0.9 ? 2 : 4;\n    } else if (!this.isGameOver()) {\n      this.addRandomCell();\n    }\n\n    return this;\n  }\n\n  canCellBeCombined(row, column) {\n    const currentCell = this.field[row][column];\n\n    if (column > 0 && this.field[row][column - 1] === currentCell) {\n      return true;\n    }\n\n    if (row > 0 && this.field[row - 1][column] === currentCell) {\n      return true;\n    }\n\n    if (column < 3 && this.field[row][column + 1] === currentCell) {\n      return true;\n    }\n\n    if (row < 3 && this.field[row + 1][column] === currentCell) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isGameOver() {\n    const isEmptyCell = this.field.some(row => row.includes(0));\n    const isMove = this.field.some((row, iR) =>\n      row.some((_, iC) => this.canCellBeCombined(iR, iC)));\n    const isGameOn = isEmptyCell || isMove;\n\n    return !isGameOn;\n  }\n\n  isGameWin() {\n    return this.field.some(row => row.some(cell => cell === 2048));\n  }\n\n  transposeField() {\n    this.field = this.field[0].map((_, c) =>\n      this.field.map((__, r) => this.field[r][c]));\n\n    return this;\n  }\n\n  moveUp() {\n    this\n      .transposeField()\n      .moveLeft()\n      .transposeField();\n  }\n\n  moveDown() {\n    this\n      .transposeField()\n      .moveRight()\n      .transposeField();\n  }\n\n  moveLeft() {\n    this.field = this.field.map(row => {\n      const newRow = row.reduce((acc, currentCell) => {\n        if (currentCell !== 0) {\n          if (acc.length > 0 && acc[acc.length - 1] === currentCell) {\n            acc[acc.length - 1] *= 2;\n            this.score += acc[acc.length - 1];\n          } else {\n            acc.push(currentCell);\n          }\n        }\n\n        return acc;\n      }, []);\n\n      newRow.push(...Array(4 - newRow.length).fill(0));\n\n      return newRow;\n    });\n    this.addRandomCell();\n\n    return this;\n  }\n\n  moveRight() {\n    this.field = this.field.map(row => {\n      const newRow = row.reduceRight((acc, currentCell) => {\n        if (currentCell !== 0) {\n          if (acc.length > 0 && acc[0] === currentCell) {\n            acc[0] *= 2;\n            this.score += acc[0];\n          } else {\n            acc.unshift(currentCell);\n          }\n        }\n\n        return acc;\n      }, []);\n\n      newRow.unshift(...Array(4 - newRow.length).fill(0));\n\n      return newRow;\n    });\n    this.addRandomCell();\n\n    return this;\n  }\n\n  resetGame() {\n    this.field = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n\n    this\n      .addRandomCell()\n      .addRandomCell();\n  }\n\n  getGameState() {\n    return {\n      field: this.field,\n      score: this.score,\n    };\n  }\n};\n","'use strict';\n// import { Game } from './game.js';\n\nconst Game = require('./game.js');\n\nconst game = new Game();\nconst cellElements = document.querySelectorAll('.field-cell');\n\nconst score = document.querySelector('.game-score');\nconst controlButton = document.querySelector('.button');\nconst message = document.querySelectorAll('.message');\n\ncontrolButton.addEventListener('click', () => {\n  if (controlButton.classList.contains('start')) {\n    controlButton.classList.remove('start');\n    controlButton.classList.add('restart');\n    controlButton.textContent = 'Restart';\n    message[2].classList.add('hidden');\n    getGameField();\n  } else if (controlButton.classList.contains('restart')) {\n    if (!message[0].classList.remove('hidden')) {\n      message[0].classList.add('hidden');\n    }\n\n    if (!message[1].classList.remove('hidden')) {\n      message[1].classList.add('hidden');\n    }\n    game.resetGame();\n    getGameField();\n  }\n});\n\ndocument.addEventListener('keydown', (click) => {\n  switch (click.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      getGameField();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      getGameField();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      getGameField();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      getGameField();\n      break;\n\n    default:\n      throw new Error('Control the game with the arrows on the keyboard');\n  }\n});\n\nfunction getGameField() {\n  game.field.forEach((row, iR) => {\n    row.forEach((cellValue, iC) => {\n      const cellElement = cellElements[iR * 4 + iC];\n\n      cellElement.textContent = cellValue === 0 ? '' : cellValue;\n      cellElement.className = `field-cell field-cell--${cellValue}`;\n    });\n  });\n\n  score.textContent = game.score;\n\n  if (game.isGameOver()) {\n    message[0].classList.remove('hidden');\n  } else if (game.isGameWin()) {\n    message[1].classList.remove('hidden');\n  }\n}\n"]}